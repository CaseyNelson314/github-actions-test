name: Test

# Here we tell GitHub to run the workflow when a commit
# is pushed or a Pull Request is opened.
on: [push, pull_request]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        board:
          - fqbn: rp2040:rp2040:rpipico
            platforms: |
              - name: rp2040:rp2040
                source-url: https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json
          - fqbn: arduino:avr:nano

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Compiles sketches
      - uses: arduino/compile-sketches@v1
        with:
          fqbn: ${{ matrix.board.fqbn }}
          platforms: ${{ matrix.board.platforms }}
          sketch-paths: |
            - ./
          libraries: '-'

# jobs:
#   # This is the name of the job - can be whatever.
#   test-matrix:

#     # Here we tell GitHub that the jobs must be determined
#     # dynamically depending on a matrix configuration.
#     strategy:
#       matrix:
#         # The matrix will produce one job for each configuration
#         # parameter of type `arduino-platform`, in this case a
#         # total of 2.
#         arduino-platform: ["arduino:avr"]
#         # This is usually optional but we need to statically define the
#         # FQBN of the boards we want to test for each platform. In the
#         # future the CLI might automatically detect and download the core
#         # needed to compile against a certain FQBN, at that point the
#         # following `include` section will be useless.
#         include:
#           # This works like this: when the platform is "arduino:samd", the
#           # variable `fqbn` is set to "arduino:samd:nano_33_iot".
#           - arduino-platform: "arduino:avr"
#             fqbn: "arduino:avr:unowifi"

#     # This is the platform GitHub will use to run our workflow, we
#     # pick Windows for no particular reason.
#     runs-on: ubuntu-latest

#     # This is the list of steps this job will run.
#     steps:
#       # First of all, we clone the repo using the `checkout` action.
#       - name: Checkout
#         uses: actions/checkout@v3

#       # We use the `arduino/setup-arduino-cli` action to install and
#       # configure the Arduino CLI on the system.
#       - name: Setup Arduino CLI
#         uses: arduino/setup-arduino-cli@v1

#       # We then install the platform, which one will be determined
#       # dynamically by the build matrix.
#       - name: Install platform
#         run: |
#           arduino-cli core update-index
#           arduino-cli core install ${{ matrix.arduino-platform }}

#       # Finally, we compile the sketch, using the FQBN that was set
#       # in the build matrix.
#       - name: Compile Sketch
#         run: arduino-cli compile --fqbn ${{ matrix.fqbn }} ./src